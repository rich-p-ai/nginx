# NGINX Load Balancer Configuration for OpenShift OCP-PRD
# This is a complete NGINX configuration template for load balancing OpenShift traffic
# Update the upstream server IPs with the output from the discovery script

# Main nginx.conf configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;
    
    # Load balancer upstream definitions
    # These will be populated by the discovery script
    
    # OpenShift API Server upstream (Master nodes on port 6443)
    upstream ocp_api_servers {
        least_conn;
        # Add master node IPs here - example:
        # server 10.20.136.51:6443 max_fails=3 fail_timeout=30s;
        # server 10.20.136.52:6443 max_fails=3 fail_timeout=30s;
        # server 10.20.136.53:6443 max_fails=3 fail_timeout=30s;
    }
    
    # OpenShift Router/Ingress HTTP upstream (Worker nodes on port 80)
    upstream ocp_router_http {
        least_conn;
        # Add worker node IPs here - example:
        # server 10.20.136.61:80 max_fails=3 fail_timeout=30s;
        # server 10.20.136.62:80 max_fails=3 fail_timeout=30s;
        # server 10.20.136.63:80 max_fails=3 fail_timeout=30s;
    }
    
    # OpenShift Router/Ingress HTTPS upstream (Worker nodes on port 443)
    upstream ocp_router_https {
        least_conn;
        # Add worker node IPs here - example:
        # server 10.20.136.61:443 max_fails=3 fail_timeout=30s;
        # server 10.20.136.62:443 max_fails=3 fail_timeout=30s;
        # server 10.20.136.63:443 max_fails=3 fail_timeout=30s;
    }
    
    # Health check upstream
    upstream ocp_health_check {
        least_conn;
        # Add all node IPs here for health monitoring
    }
    
    # API Server Load Balancer (port 6443)
    server {
        listen 6443 ssl;
        server_name api.ocp-prd.kohlerco.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/ocp-prd-api.crt;
        ssl_certificate_key /etc/nginx/ssl/ocp-prd-api.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Proxy to API servers
        location / {
            proxy_pass https://ocp_api_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API-specific settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # WebSocket support for oc exec, logs, etc.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Health check endpoint
        location /healthz {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Application Router Load Balancer (HTTPS - port 443)
    server {
        listen 443 ssl default_server;
        server_name *.apps.ocp-prd.kohlerco.com;
        
        # SSL configuration (wildcard certificate)
        ssl_certificate /etc/nginx/ssl/wildcard-apps-ocp-prd.crt;
        ssl_certificate_key /etc/nginx/ssl/wildcard-apps-ocp-prd.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Large client body size for application uploads
        client_max_body_size 100m;
        
        # Proxy to router/ingress
        location / {
            proxy_pass https://ocp_router_https;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Application Router Load Balancer (HTTP - port 80)
    server {
        listen 80 default_server;
        server_name *.apps.ocp-prd.kohlerco.com;
        
        # Redirect HTTP to HTTPS for security
        return 301 https://$server_name$request_uri;
    }
    
    # Default HTTP server for non-matching hosts
    server {
        listen 80;
        server_name _;
        return 444;  # Close connection without response
    }
    
    # Default HTTPS server for non-matching hosts
    server {
        listen 443 ssl;
        server_name _;
        
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        return 444;  # Close connection without response
    }
    
    # Health monitoring endpoint
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.20.136.0/24;  # Allow from OpenShift network
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "NGINX Load Balancer is healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream configuration for TCP load balancing (if needed for other services)
stream {
    # Log format for stream
    log_format basic '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time';
    
    # Example: Load balance a custom TCP service
    # upstream custom_tcp_service {
    #     server 10.20.136.61:8080;
    #     server 10.20.136.62:8080;
    #     server 10.20.136.63:8080;
    # }
    
    # server {
    #     listen 8080;
    #     proxy_pass custom_tcp_service;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    # }
}
